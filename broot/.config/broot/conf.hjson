###############################################################
# This configuration file lets you
# - define new commands
# - change the shortcut or triggering keys of built-in verbs
# - change the colors
# - set default values for flags
# - set special behaviors on specific paths
# - and more...
#
# Configuration documentation is available at
#     https://dystroy.org/broot
#
# This file's format is Hjson ( https://hjson.github.io/ ). Some
#Â properties are commented out. To enable them, remove the `#`.
#
###############################################################
{

    ###############################################################
    # Default flags
    # You can set up flags you want broot to start with by
    # default, for example `default_flags="ihp"` if you usually want
    # to see hidden and gitignored files and the permissions (then
    # if you don't want the hidden files you can launch `br -H`)
    # A popular flag is the `g` one which displays git related info.
    #
    default_flags: g

    ###############################################################
    # Date/Time format
    # If you want to change the format for date/time, uncomment the
    # following line and change it according to
    # https://docs.rs/chrono/0.4.11/chrono/format/strftime/index.html
    #
    # date_time_format: %Y/%m/%d %R

        ###############################################################
        # uncomment to activate modal mode
    #
    # (you really should read https://dystroy.org/broot/vim_mode/
    # before as it may not suit anybody even among vim users)
    #
        # modal: true

    ###############################################################
    # Whether to mark the selected line with a triangle
    #
    show_selection_mark: true

    ###############################################################
    # Column order
    # cols_order, if specified, must be a permutation of the following
    # array. You should keep the name at the end as it has a variable
    # length.
    #
    # cols_order: [
    #   mark
    #   git
    #   size
    #   permission
    #   date
    #   count
    #   branch
    #   name
    # ]

    ###############################################################
    # True Colors
    # If this parameter isn't set, broot tries to automatically
    # determine whether true colors (24 bits) are available.
    # As this process is unreliable, you may uncomment this setting
    # and set it to false or true if you notice the colors in
    # previewed images are too off.
    #
    # true_colors: false

    ###############################################################
    # Icons
    # If you want to display icons in broot, uncomment this line
    # (see https://dystroy.org/broot/icons for installation and
    # troubleshooting)
    #
    # icon_theme: vscode

    ###############################################################
    # Special paths
    # If some paths must be handled specially, uncomment (and change
    # this section as per the examples)
    #
    # special_paths: {
    #   "/media/slow-backup-disk"       : no-enter
    #   "/home/dys/useless"         : hide
    #   "/home/dys/my-link-I-want-to-explore"   : enter
    # }

    ###############################################################
    # Quit on last cancel
    # You can usually cancel the last state change on escape.
    # If you want the escape key to quit broot when there's nothing
    # to cancel (for example when you just opened broot), uncomment
    # this parameter
    #
    quit_on_last_cancel: true

    ###############################################################
    # Search modes
        #
        # broot allows many search modes.
        # A search mode is defined by
        # - the way to search: 'fuzzy', 'exact', 'regex', or 'tokens'.
        # - where to search: file 'name', 'path', or file 'content'
        # A search pattern may for example be "fuzzy path" (default),
        # "regex content" or "exact path".
        #
        # The search mode is selected from its prefix. For example, if
        # you type "abc", the default mode is "fuzzy path". If you type
        # "/abc", the mode is "regex path". If you type "rn/abc", the mode
        # is "regex name".
        #
        # This mapping may be modified. You may want to dedicate the
        # empty prefix (the one which doesn't need a '/') to the
        # search mode you use most often. The example below makes it
        # easy to search on name rather than on the subpath.
        #
        # More information on
        #  https://dystroy.org/broot/input/#the-filtering-pattern
        #
        # search_modes: {
        #     <empty>: fuzzy name
        #     /: regex name
        # }

    ###############################################################
    # Verbs and shortcuts
    # You can define your own commands which would be applied to
    # the selection.
    # You'll also find below verbs that you can customize or enable.
    verbs: [

        # Exemple 1: launching `tail -n` on the selected file (leaving broot)
        # {
        #   name: tail_lines
        #   invocation: tl {lines_count}
        #   execution: "tail -f -n {lines_count} {file}"
        # }

        # Exemple 2: creating a new file without leaving broot
        # {
        #   name: touch
        #   invocation: touch {new_file}
        #   execution: "touch {directory}/{new_file}"
        #   leave_broot: false
        # }

        # A standard recommended command for editing files, that you
        # can customize.
        # If $EDITOR isn't set on your computer, you should either set it using
        #  something similar to
        #   export EDITOR=nvim
        #  or just replace it with your editor of choice in the 'execution'
        #  pattern.
        #  If your editor is able to open a file on a specific line, use {line}
        #   so that you may jump directly at the right line from a preview.
        # Example:
        #  execution: nvim +{line} {file}
        {
            invocation: edit
            shortcut: e
            execution: "$EDITOR +{line} {file}"
            leave_broot: false
        }

        # A convenient shortcut to create new text files in
        # the current directory or below
        {
            invocation: create {subpath}
            execution: "$EDITOR {directory}/{subpath}"
            leave_broot: false
        }

        {
            invocation: git_diff
            shortcut: gd
            leave_broot: false
            execution: "git difftool -y {file}"
        }

        # On ctrl-b, propose the creation of a copy of the selection.
        # While this might occasionnaly be useful, this verb is mostly here
        # as an example to demonstrate rare standard groups like {file-stem}
        # and {file-dot-extension} and the auto_exec verb property which
        # allows verbs not executed until you hit enter
        # {
        #     invocation: "backup {version}"
        #     key: ctrl-b
        #     leave_broot: false
        #     auto_exec: false
        #     execution: "cp -r {file} {parent}/{file-stem}-{version}{file-dot-extension}"
        # }

        # This verb lets you launch a terminal on ctrl-T
        # (on exit you'll be back in broot)
        {
            invocation: terminal
            key: ctrl-t
            execution: "$SHELL"
            set_working_dir: true
            leave_broot: false
        }

        # Here's an example of a shortcut bringing you to your home directory
        {
            invocation: home
            key: ctrl-home
            execution: ":focus ~"
        }

        { key: "ctrl-p",       execution: ":line_up" }
        { key: "ctrl-n",       execution: ":line_down" }
        { key: "alt-v",        execution: ":page_up" }
        { key: "ctrl-v",       execution: ":page_down" }
        { key: "alt-p",        execution: ":start_end_panel" }
        { key: "ctrl-h",       execution: ":toggle_hidden" }
        { key: "ctrl-o",        internal: ":focus" }
        { key: "ctrl-l",        internal: ":focus .." }
        { key: "ctrl-b",        internal: ":input_go_left" }
        { key: "ctrl-f",        internal: ":input_go_right" }
        { key: "alt-b",         internal: ":input_go_word_left" }
        { key: "alt-f",         internal: ":input_go_word_right" }
        { key: "ctrl-a",        internal: ":input_go_to_start" }
        { key: "ctrl-e",        internal: ":input_go_to_end" }
        { key: "alt-backspace", internal: ":input_del_word_left" }
        { key: "alt-d",         internal: ":input_del_word_right" }
        { key: "ctrl-d",        internal: ":input_del_char_below" }

        # If you develop using git, you might like to often switch
        # to the git status filter:
        {
          key: ctrl-g
          execution: ":toggle_git_status"
        }

        # You can reproduce the bindings of Norton Commander
        # on copying or moving to the other panel:
        # {
        #   key: F5
        #   external: "cp -r {file} {other-panel-directory}"
        #   leave_broot: false
        # }
        # {
        #   key: F6
        #   external: "mv {file} {other-panel-directory}"
        #   leave_broot: false
        # }
    ]

    ###############################################################
    # Skin
    # If you want to change the colors of broot,
    # uncomment the following bloc and start messing
    # with the various values.
        # A skin entry value is made of two parts separated with a '/':
        # The first one is the skin for the active panel.
        # The second one, optional, is the skin for non active panels.
    # You may find explanations and other skins on
    #  https://dystroy.org/broot/skins
    skin: {
        default: rgb(235, 219, 178) none / rgb(189, 174, 147) none
        tree: rgb(168, 153, 132) None / rgb(102, 92, 84) None
        parent: rgb(235, 219, 178) none / rgb(189, 174, 147) none Italic
        file: None None / None  None Italic
        directory: rgb(131, 165, 152) None Bold / rgb(131, 165, 152) None
        exe: rgb(184, 187, 38) None
        link: rgb(104, 157, 106) None
        pruning: rgb(124, 111, 100) None Italic
        perm__: None None
        perm_r: rgb(215, 153, 33) None
        perm_w: rgb(204, 36, 29) None
        perm_x: rgb(152, 151, 26) None
        owner: rgb(215, 153, 33) None Bold
        group: rgb(215, 153, 33) None
        count: rgb(69, 133, 136) rgb(50, 48, 47)
        dates: rgb(168, 153, 132) None
        sparse: rgb(250, 189,47) None
        content_extract: ansi(29) None Italic
        content_match: ansi(34) None Bold
        git_branch: rgb(251, 241, 199) None
        git_insertions: rgb(152, 151, 26) None
        git_deletions: rgb(190, 15, 23) None
        git_status_current: rgb(60, 56, 54) None
        git_status_modified: rgb(152, 151, 26) None
        git_status_new: rgb(104, 187, 38) None Bold
        git_status_ignored: rgb(213, 196, 161) None
        git_status_conflicted: rgb(204, 36, 29) None
        git_status_other: rgb(204, 36, 29) None
        selected_line: None rgb(60, 56, 54) / None rgb(50, 48, 47)
        char_match: rgb(250, 189, 47) None
        file_error: rgb(251, 73, 52) None
        flag_label: rgb(189, 174, 147) None
        flag_value: rgb(211, 134, 155) None Bold
        input: rgb(251, 241, 199) None / rgb(189, 174, 147) None Italic
        status_error: rgb(213, 196, 161) rgb(204, 36, 29)
        status_job: rgb(250, 189, 47) rgb(60, 56, 54)
        status_normal: None rgb(40, 38, 37) / None None
        status_italic: rgb(211, 134, 155) rgb(40, 38, 37) Italic / None None
        status_bold: rgb(211, 134, 155) rgb(40, 38, 37) Bold / None None
        status_code: rgb(251, 241, 199) rgb(40, 38, 37) / None None
        status_ellipsis: rgb(251, 241, 199) rgb(40, 38, 37)  Bold / None None
        purpose_normal: None None
        purpose_italic: rgb(177, 98, 134) None Italic
        purpose_bold: rgb(177, 98, 134) None Bold
        purpose_ellipsis: None None
        scrollbar_track: rgb(80, 73, 69) None / rgb(50, 48, 47) None
        scrollbar_thumb: rgb(213, 196, 161) None / rgb(102, 92, 84) None
        help_paragraph: None None
        help_bold: rgb(214, 93, 14) None Bold
        help_italic: rgb(211, 134, 155) None Italic
        help_code: rgb(142, 192, 124) rgb(50, 48, 47)
        help_headers: rgb(254, 128, 25) None Bold
        help_table_border: rgb(80, 73, 69) None
        preview_title: rgb(235, 219, 178) rgb(40, 40, 40) / rgb(189, 174, 147) rgb(40, 40, 40)
        preview: rgb(235, 219, 178) rgb(40, 40, 40) / rgb(235, 219, 178) rgb(40, 40, 40)
        preview_line_number: rgb(124, 111, 100) None / rgb(124, 111, 100) rgb(40, 40, 40)
        preview_match: None ansi(29) Bold
        hex_null: rgb(189, 174, 147) None
        hex_ascii_graphic: rgb(213, 196, 161) None
        hex_ascii_whitespace: rgb(152, 151, 26) None
        hex_ascii_other: rgb(254, 128, 25) None
        hex_non_ascii: rgb(214, 93, 14) None
        staging_area_title: rgb(235, 219, 178) rgb(40, 40, 40) / rgb(189, 174, 147) rgb(40, 40, 40)
        mode_command_mark: gray(5) ansi(204) Bold
    }

    ###############################################################
    # File Extension Colors
    #
    # uncomment and modify the next section if you want to color
    # file name depending on their extension
    #
    # ext_colors: {
    #   png: rgb(255, 128, 75)
    #   rs: yellow
    # }


    ###############################################################
    # Max Panels Count
        #
    # Change this if you sometimes want to have more than 2 panels
        # open
        # max_panels_count: 2
}
