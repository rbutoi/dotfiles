This file contains my [[github:hlissner/doom-emacs][Doom Emacs]] configuration.

* Preamble

Enable lexical binding [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#use-lexical-binding-everywhere][by default]].

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t; -*-
#+END_SRC

Start benchmark for user config load time.

#+BEGIN_SRC emacs-lisp
(setq user-config-start-time (current-time))
#+END_SRC

** Packages

#+BEGIN_SRC emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
(package! buffer-move)
(package! zoom-window)
(package! string-inflection)
(package! dired-hide-dotfiles)
(package! pkgbuild-mode)
(package! highlight-thing)
(package! goto-chg)
(package! defrepeater)
(package! keychain-environment)
#+END_SRC

* UI

** Theme

#+BEGIN_SRC emacs-lisp
;; TODO: add font, colour theme

;; make window divider prettier in terminal
(set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?â”‚))
#+END_SRC

** Buffers and windows

#+BEGIN_SRC emacs-lisp
;; more convenient M-binds. * because M-binds are frequently rebound
(bind-keys*
 ("M-0"     . delete-window)
 ("M-1"     . delete-other-windows)
 ("M-2"     . split-window-below)
 ("M-3"     . split-window-right))
(map!
 "M-o"     'other-window
 "M-i"     (lambda! (other-window -1))
 "M-l"     (lambda! (select-window (get-mru-window t t t)))
 "C-k"     'kill-current-buffer
 "C-S-k"   'doom/kill-other-buffers
 "C-S-M-k" 'doom/kill-all-buffers
 "C-x M-k" 'doom/kill-other-buffers ; for when in terminal
 "C-x C-M-k" 'doom/kill-all-buffers)

;; might fix query-replace somehow??
;; https://github.com/syl20bnr/spacemacs/issues/10938#issuecomment-407291657
(setq frame-title-format nil)

;; always keep windows balanced
(defadvice split-window-below (after restore-balanace-below activate)
  (balance-windows))
(defadvice split-window-right (after restore-balance-right activate)
  (balance-windows))
(defadvice delete-window (after restore-balance activate)
  (balance-windows))

(use-package zoom-window :bind (("C-x C-z" . zoom-window-zoom)))

(setq split-height-threshold nil
      split-width-threshold 120)

(use-package buffer-move
  :bind (("<C-S-up>" . buf-move-up)
         ("<C-S-down>" . buf-move-down)
         ("<C-S-left>" . buf-move-left)
         ("<C-S-right>" . buf-move-right)))
#+END_SRC

** Popups

#+BEGIN_SRC emacs-lisp
(map! "M-`" '+popup/toggle ; aliases tmm-menubar
      "M-~" 'tmm-menubar)  ; this aliases not-modified
(set-popup-rule! "^\\*compilation\\*$" :ignore t)
#+END_SRC

** Ivy / counsel

#+BEGIN_SRC emacs-lisp
(map! "C-c C-r" 'ivy-resume
      "C-x m"   'counsel-M-x
      "C-x C-m" 'counsel-M-x
      "C-x C-b" 'counsel-switch-buffer
      "C-x b"   'counsel-buffer-or-recentf
      "C-o"     'counsel-semantic-or-imenu
      "C-M-s"   (lambda! (counsel-rg (thing-at-point 'symbol)))
      ;; doesn't show hidden files
      "C-x f"   (defun counsel-file-jump-ask-dir () (interactive)
                       (execute-extended-command t "counsel-file-jump"))
      "C-x M-f" 'counsel-file-jump-ask-dir
      "C-s"     'swiper-isearch
      "C-r"     'swiper-isearch-backward
      "C-M-o"   'swiper-isearch-thing-at-point
      (:map ivy-minibuffer-map
        "C-k"   'ivy-alt-done) ; because C-j is used by tmux
      (:map counsel-find-file-map
        "C-l"   'counsel-up-directory))
;;.. can be replaced by DEL/C-l, but . is still useful for e.g. dired here
(setq ivy-extra-directories '("."))
#+END_SRC

** Defrepeater

#+BEGIN_SRC emacs-lisp
(map! [remap doom/toggle-line-numbers] (defrepeater #'doom/toggle-line-numbers))
(map! [remap +word-wrap-mode] (defrepeater #'+word-wrap-mode))
(map! [remap string-inflection-cycle] (defrepeater #'string-inflection-cycle))
#+END_SRC

** Misc / one-offs

#+BEGIN_SRC emacs-lisp
;; Don't display line numbers by default.
(setq display-line-numbers-type nil)

;; Don't confirm exit.
(setq confirm-kill-emacs nil)
#+END_SRC

* Editing

** Revert file

#+BEGIN_SRC emacs-lisp
(map! "C-c r" 'revert-buffer)
(global-auto-revert-mode)

(defun modi/revert-all-file-buffers ()
  "Refresh all open file buffers without confirmation.
Buffers in modified (not yet saved) state in emacs will not be
reverted. They will be reverted though if they were modified
outside emacs. Buffers visiting files which do not exist any more
or are no longer readable will be killed."
  (interactive)
  (dolist (buf (buffer-list))
    (let ((filename (buffer-file-name buf)))
      ;; Revert only buffers containing files, which are not modified;
      ;; do not try to revert non-file buffers like *Messages*.
      (when (and filename
                 (not (buffer-modified-p buf)))
        (if (file-readable-p filename)
            ;; If the file exists and is readable, revert the buffer.
            (with-current-buffer buf
              (revert-buffer :ignore-auto :noconfirm :preserve-modes))
          ;; Otherwise, kill the buffer.
          (let (kill-buffer-query-functions) ; No query done when killing buffer
            (kill-buffer buf)
            (message "Killed non-existing/unreadable file buffer: %s" filename))))))
  (message "Finished reverting buffers containing unmodified files."))
(map! "C-c R" 'modi/revert-all-file-buffers)
#+END_SRC

** M-{n,p} for paragraph movement

#+BEGIN_SRC emacs-lisp
(map! "M-p" 'backward-paragraph
      "M-n" 'forward-paragraph)
#+END_SRC

** goto-chg

#+BEGIN_SRC emacs-lisp
(use-package goto-chg
  :bind (("C-." . goto-last-change)
         ("C-," . goto-last-change-reverse)))
#+END_SRC

** comment-or-uncomment-line-or-region

The default M-; without a region adds a comment to the end of a line, where I
generally want to comment out the line.

#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment-line-or-region ()
  "Comments or uncomments the current line or region."
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (progn
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
      (forward-line))))
(map! "M-[ q" 'comment-or-uncomment-line-or-region
      "M-;"   'comment-or-uncomment-line-or-region)
#+END_SRC

** Better C-w

#+BEGIN_SRC emacs-lisp
(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(defadvice kill-ring-save (before slick-cut activate compile)
  "When called interactively with no active region, save a single line instead."
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))
#+END_SRC
** Misc / one-offs

#+BEGIN_SRC emacs-lisp
(use-package string-inflection :bind ("C-c C-u" . string-inflection-cycle))

(use-package dired-hide-dotfiles
  :bind (:map dired-mode-map ("." . dired-hide-dotfiles-mode)))

;; for terminal availability
(map! "C-M-%" 'query-replace
      "M-%"   'query-replace-regexp ; prioritize for terminal availability
      "M-="   'er/expand-region)

;; can keep C-u C-SPC C-SPC C-SPC...
(setq set-mark-command-repeat-pop t)
#+END_SRC

* Programming

** Languages

#+BEGIN_SRC emacs-lisp
;; Perl
(with-eval-after-load 'perl-mode
  (map! "C-c C-d" :map perl-mode-map 'cperl-perldoc))

;; Assembler
(with-eval-after-load 'asm-mode
  (map! "TAB" :map asm-mode-map 'asm-indent-line))

;; Data/config
(add-hook! (yaml-mode conf-unix-mode conf-space-mode)
  (run-mode-hooks 'prog-mode-hook))

;; C/C++
(with-eval-after-load 'cc-mode
  (map! "C-c C-o" :map c-mode-base-map
        (lambda! (ff-find-other-file nil 'ignore-include))))
(add-hook! c++-mode (c-set-offset 'innamespace [0]))
(sp-local-pair 'c++-mode "<" ">" :when '(sp-point-after-word-p))
(add-hook! 'c-mode-common-hook ; formatting
  (fset 'c-indent-region 'clang-format-region))

;; LaTeX
(setq TeX-auto-untabify t)

;; YAML
(add-hook! yaml-mode (run-mode-hooks 'prog-mode-hook))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
(map! "TAB"     'company-indent-or-complete-common
      "C-<tab>" 'dabbrev-expand ;; low-tech alternative
      "M-/"     'dabbrev-expand)
(setq tab-always-indent        'complete
      company-dabbrev-downcase nil)
#+END_SRC

** Diffing

#+BEGIN_SRC emacs-lisp
(add-hook! diff-mode (read-only-mode t))
(map! "C-x C-v" 'vc-prefix-map)
#+END_SRC

** Compiling

#+BEGIN_SRC emacs-lisp
(defun close-compile-window-if-successful (buffer string)
  " close a compilation window if succeeded without warnings "
  (if (and
       (string-match "compilation" (buffer-name buffer))
       (string-match "finished" string)
       (not
        (with-current-buffer buffer
          (search-forward "warning" nil t))))
      (run-with-timer 1 nil
                      (lambda (window) (quit-window nil window))
                      (get-buffer-window buffer))))
(add-hook 'compilation-finish-functions 'close-compile-window-if-successful)
(map! "S-<f7>" (lambda! (switch-to-buffer "*compilation*"))
      :map prog-mode
      "<f7>" 'compile
      "<f8>" 'recompile)
(setq compilation-message-face 'default)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(map! "C-x   g" 'magit-status
      "C-x C-g" 'magit-status)
(setq magit-log-auto-more t
      magit-log-margin '(t "%a %b %d %Y" magit-log-margin-width t 18))
(use-package keychain-environment :config (keychain-refresh-environment))
#+END_SRC

** Misc / one-offs

#+BEGIN_SRC emacs-lisp
(add-hook! prog-mode 'highlight-thing-mode 'which-function-mode)
#+END_SRC

* Closing

Load host-specific setup.

#+BEGIN_SRC emacs-lisp
(load (concat doom-private-dir "specific.el") 'noerror)
#+END_SRC

Start server if not running.

#+BEGIN_SRC emacs-lisp
(require 'server) (unless (server-running-p) (server-start))
#+END_SRC

Echo benchmarked startup time.

#+BEGIN_SRC emacs-lisp
(setq user-config-runtime (float-time (time-subtract (current-time)
                                                     user-config-start-time)))
(add-hook! 'window-setup-hook :append
  (message "User config loaded in %.03fs" user-config-runtime) (message ""))
#+END_SRC
